
    
    
    
    
    
    
    
    
    [{"authors":null,"categories":null,"content":" My main interests revolve around physics, simulation and computer science. I like to find innovative solutions to complex problems by combining my scientific knowledge with my technical skills in programming and machine learning.\nContact Please do not hesitate to reach out with any questions or feedback you may have about my research or my personal projects.\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1659216125,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"My main interests revolve around physics, simulation and computer science. I like to find innovative solutions to complex problems by combining my scientific knowledge with my technical skills in programming and machine learning.","tags":null,"title":"Joris Paret","type":"authors"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature. Slides can be added in a few ways:\nCreate slides using Wowchemy’s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes. Further event details, including page elements such as image galleries, can be added to the body of this page.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1650770445,"objectID":"a8edef490afe42206247b6ac05657af0","permalink":"https://jorisparet.github.io/talk/example-talk/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/talk/example-talk/","section":"event","summary":"An example talk using Wowchemy's Markdown slides feature.","tags":[],"title":"Example Talk","type":"event"},{"authors":null,"categories":null,"content":" hamoco (handy mouse controller) is a python application that allows you to control your mouse from your webcam using various hand gestures. You have a laptop equiped with a webcam? Well, good news, that’s all you need to feel like Tom Cruise in Minority Report! Kind of.\nDemonstration In the example below, the hand is used to move the pointer, open a file by double-clicking on it, scroll through it, select a paragraph and cut it. The file is then dragged and dropped into a folder.\nHow does it work? By using the power of PyAutoGUI to control the mouse, openCV to process the video feed, and MediaPipe to track hands, hamoco predicts the nature of a hand pose in real-time thanks to a neural network and uses it to perform various kinds of mouse pointer actions.\nInstallation From the code repository:\ngit clone https://github.com/jorisparet/hamoco cd hamoco pip install -r requirements.txt pip install . The package will be published on PyPI at a later stage of development.\nRequirements: PyAutoGUI NumPy openCV MediaPipe TensorFlow Quick start After the installation, the package should have copied three binaries in the .local/bin/ folder of your home directory:\nhamoco-run hamoco-data hamoco-train (Make sure this location is included in your $PATH environment variable)\nRun these applications directly in the terminal, e.g. hamoco-run --sensitivity 0.5 --show.\nhamoco-run hamoco-run is the main application. It activates the webcam and allows to use hand gestures to take control of the mouse pointer. Several basic actions can then be performed, such as left click, right click, drag and drop and scrolling. Various settings can be adjusted to customize the hand controller to your liking, such as the global sensivitity and parameters for motion smoothing. Type --help for more information on the available options.\nExamples:\nhamoco-run --sensitivity 0.4 --scrolling_threshold 0.2 : adapts the sensitivity and sets a custom threshold value to trigger scrolling motions. hamoco-run --min_cutoff_filter 0.05 --show : sets a custom value for the cutoff frequency used for motion smoothing and opens a window that shows the processed video feed in real-time. hamoco-run --scrolling_speed 20 : sets a custom value for the scrolling speed. Note that for a given value, results may differ significantly depending on the operating system. Hand poses \u0026amp; Mouse actions:\nOPEN : the pointer is free and follows the center of the palm (indicated by the white empty square) ; CLOSE : the pointer stops all actions ; INDEX_UP : performs a left-click at the current pointer location. Execute twice rapidly for a double-click ; PINKY_UP : performs a right click at the current pointer location ; INDEX_MIDDLE_UP : holds the left mouse button down and moves the pointer by following the center of the palm. This is used for selection and drag \u0026amp; drop ; THUMB_SIDE : enables vertical scrolling using the first triggering location as origin. Scrolling up or down is done by moving the hand up or down relative to the origin while keeping the same hand pose ; The various hand poses are illustrated below:\nhamoco-data hamoco-data activates the webcam and allows to record your own labeled data for hand poses in order to train a custom NN-based classification model for the main application. This model can then be used in place of the one provided by default and will be more performant, as it will be trained on your personal and natural hand poses (see hamoco-train). Type --help for more information on the available options.\nThis application requires two arguments:\npose: a string that indicates the type of hand pose you intend to record. It should be one of {OPEN, CLOSE, INDEX_UP, PINKY_UP, THUMB_SIDE, INDEX_MIDDLE_UP}. path_to_data: path to the folder inside of which you want the recorded data to be saved. Examples:\nhamoco-data OPEN data/ --delay 1.0 : starts the recording for the OPEN hand pose, stores the resulting data in the data folder (provided it exists!), and takes a new snapshot every second. hamoco-data INDEX_UP data/ --delay 0.25 --images : starts the recording for the INDEX_UP hand pose, stores the resulting data in the data folder, takes a new snapshot every 0.25s, and saves the images (in addition to the numeric data file used for training the model). Saving images can be useful if you want to manually check if your hand was in a correct position when its numerical data was recorded, and hence keep or remove specific data files accordingly. hamoco-train Provided a path to a directory with compatible data, hamoco-train trains a customizable NN-based classification model to predict a hand pose. This classification model can then be used in the main application in place of the one provided by default. Type --help for more information on the available options.\nThis application requires two arguments:\npath_to_model : path to save the newly trained model. path_to_data : path to the data folder to use to train the model (see hamoco-data). Examples:\nhamoco-train …","date":1653782400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1659199830,"objectID":"4a0ed2b62b9aab726957c481e10d2203","permalink":"https://jorisparet.github.io/project/hamoco/","publishdate":"2022-05-29T00:00:00Z","relpermalink":"/project/hamoco/","section":"project","summary":"Real-time mouse control via webcam-recorded hand gestures.","tags":["Python","Machine Learning","Deep Learning"],"title":"hamoco","type":"project"},{"authors":null,"categories":null,"content":" Synth Road is an arcade mobile game of obstacle course for Android with synthwave vibes. Money generated from the optional advertisement is donated to NGOs.\nGame rules Hold your finger down at the bottom of the screen and move it to slide the player left and right to avoid the obstacles. Collect as many blue bonuses as possible to increase the score multiplier. Collect gold bonuses to temporarily become invincible: bash through obstacles and collect as many blue bonuses as possible. Use the power buttons to temporarily slow time, shrink the player or disintegrate obstacles. Publish your highscores on the leaderboard to compare your results with other players. About Synth Road is made with Unity. Illustrations, music and sound effects are original creations.\nAuthor Joris Paret\n","date":1643328000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1659199830,"objectID":"1b93bb0be6694b7f8759bad087043e54","permalink":"https://jorisparet.github.io/project/synth-road/","publishdate":"2022-01-28T00:00:00Z","relpermalink":"/project/synth-road/","section":"project","summary":"Arcade mobile game of obstacle course for Android with synthwave vibes.","tags":["C#","Unity","Game Dev"],"title":"Synth Road","type":"project"},{"authors":["Joris Paret"],"categories":null,"content":" ","date":1637884800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1659216125,"objectID":"8ada98ce783cc577925c882b40877841","permalink":"https://jorisparet.github.io/publication/2021_thesis/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/2021_thesis/","section":"publication","summary":"When cooled down below their melting temperature, liquids undergo a phase transition to a stable crystalline state, where atoms rearrange in a periodic fashion in order to form a long range order. For some liquids however, when the cooling is fast enough, crystallization can be avoided and the system progressively enters a metastable state termed « supercooled ». In this regime, the dynamics of the liquid becomes more and more heterogeneous and the viscosity increases dramatically as the temperature is reduced, to the point where the system stops flowing and solidifies, it turns into glass. Despite this sudden ridigity, it keeps the properties of a liquid at the microscopic scale, with a disordered -or « amorphous »- structure, that contrasts with its stable crystalline phase. The theoretical origin of this glass transition remains enigmatic, in particular the process in which viscosity increases so strikingly by progressively trapping the system in a metastable state instead of crystallizing. This surprising phenomenon is the subject of intensive research, and a number of theories still attempt to explain its origin through thermodynamic, dynamic or simply structural mechanisms. In this thesis, we focus on structural aspects by proposing to study the local structure of numerical model glass formers. In particular, we develop a method for community inference, based on information theory, that allows to reveal the structural heterogeneity in these systems using simple spatial correlations. This method is based on the concept of « clustering », an unsupervised learning framework that consists in grouping the particles of a system into communities depending on the properties of their local structure. Secondly, we put community inference into perspective with other clustering methods, leading notably to the publication of a versatile open source code dedicated to the study of local structure in supercooled liquids and glasses. We then show that, to some extent, these structural communities are correlated to the dynamic heterogeneities that are characteristic of supercooled liquids. Finally, thanks to recent advances in the domains of computer simulations, we study the evolution of the structure and of the dynamics in a ternary model supercooled liquid through a very wide range of temperatures. These simulations allow us to test various theoretical predictions for the glass transition with an unprecedented precision compared to conventional simulations.","tags":[],"title":"Hidden order in disordered materials","type":"publication"},{"authors":["Joris Paret","Daniele Coslovich"],"categories":null,"content":" ","date":1635724800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1659216125,"objectID":"2961351a47f8725bea25e294107c0ddc","permalink":"https://jorisparet.github.io/publication/2021_joss/","publishdate":"2017-01-08T00:00:00Z","relpermalink":"/publication/2021_joss/","section":"publication","summary":"partycls is a Python framework for cluster analysis of systems of interacting particles. By grouping particles that share similar structural or dynamical properties, partycls enables rapid and unsupervised exploration of the system’s relevant features. It provides descriptors suitable for applications in condensed matter physics and integrates the necessary tools of unsupervised learning, such as dimensionality reduction, into a streamlined workflow. Through a simple and expressive interface, partycls allows one to open a trajectory file, perform a clustering based on the selected structural descriptor, and analyze and save the results with only a few lines of code.","tags":[],"title":"partycls: A Python package for structural clustering","type":"publication"},{"authors":null,"categories":null,"content":" partycls is a Python package for cluster analysis of systems of interacting particles. By grouping particles that share similar structural or dynamical properties, partycls enables rapid and unsupervised exploration of the system’s relevant features. It provides descriptors suitable for applications in condensed matter physics, such as structural analysis of disordered or partially ordered materials, and integrates the necessary tools of unsupervised learning into a streamlined workflow.\nQuick start This quick example shows how to use partycls to identify grain boundaries in a polycrystalline system. The system configuration is stored in a XYZ trajectory file with a single frame. We use the local distribution of bond angles around each particle as a structural descriptor and perform a clustering using the K-Means algorithm.\nfrom partycls import Trajectory, Workflow traj = Trajectory(\u0026#39;grains.xyz\u0026#39;) wf = Workflow(traj, descriptor=\u0026#39;ba\u0026#39;, clustering=\u0026#39;kmeans\u0026#39;) wf.run() traj[0].show(color=\u0026#39;label\u0026#39;, backend=\u0026#39;ovito\u0026#39;) The results are also written to a set of files including a labeled trajectory file and additional information on the clustering results. The whole workflow can be tuned and customized, check out the tutorials to see how and for further examples.\nThanks to a flexible system of filters, partycls makes it easy to restrict the analysis to a given subset of particles based on arbitrary particle properties. Say we have a binary mixture composed of particles with types A and B, and we are only interested in analyzing the bond angles of B particles in a vertical slice:\nfrom partycls import Trajectory from partycls.descriptor import BondAngleDescriptor traj = Trajectory(\u0026#39;trajectory.xyz\u0026#39;) D = BondAngleDescriptor(traj) D.add_filter(\u0026#34;species == \u0026#39;B\u0026#39;\u0026#34;) D.add_filter(\u0026#34;x \u0026gt; 0.0\u0026#34;) D.add_filter(\u0026#34;x \u0026lt; 1.0\u0026#34;) D.compute() # Angular correlations for the selected particles print(D.features) We can then perform a clustering based on these structural features and ask for 3 clusters:\nfrom partycls import KMeans clustering = KMeans(n_clusters=3) clustering.fit(D.features) print(\u0026#39;Cluster membership of the particles\u0026#39;, clustering.labels) Features partycls accepts several trajectory formats (including custom ones) either through its built-in trajectory reader or via third-party packages, such as MDTraj and atooms. The code is currently optimized for small and medium system sizes (of order 10⁴ particles). Multiple trajectory frames can be analyzed to extend the structural dataset. partycls implements various structural descriptors: radial distribution, bond-angle distribution, standard bond order parameters (see the original paper), and locally averaged bond order parameters (see the original paper). On top of these native descriptors, partycls supports additional structural descriptors via DScribe. partycls performs feature scaling, dimensionality reduction and cluster analysis using the scikit-learn package and additional built-in algorithms. Requirements Fortran compiler numpy scikit-learn [optional] mdtraj (additional trajectory formats) [optional] atooms \u0026lt; 3.0.0 (additional trajectory formats) [optional] dscribe (additional descriptors) [optional] matplotlib (visualization) [optional] ovito (visualization) [optional] py3Dmol (interactive 3D visualization) Documentation See the tutorials (Jupyter notebooks) for a step-by-step introduction to the main features of partycls and some of its applications. Full API documentation. Installation 1. From pypi:\npip install partycls 2. From the code repository:\ngit clone https://github.com/jorisparet/partycls.git cd partycls make install Run the tests using:\nmake test or manually compile the Fortran source and run the tests:\ncd partycls/descriptor/ f2py -c -m realspace_wrap realspace.f90 cd ../../ pytest tests/ Support and contribution If you wish to contribute or report an issue, feel free to contact us or to use the issue tracker and pull requests from the code repository.\nWe largely follow the GitHub flow to integrate community contributions. In essence:\nfork the repository ; create a feature branch from master ; unleash your creativity ; run the tests ; open a pull request ; We also welcome contributions from other platforms, such as GitLab instances. Just let us know where to find your feature branch.\nCiting partycls If you use partycls in a scientific publication, please consider citing the following article:\npartycls: A Python package for structural clustering. Paret et al., (2021). Journal of Open Source Software, 6(67), 3723\nBibtex entry:\n@article{Paret2021, doi = {10.21105/joss.03723}, url = {https://doi.org/10.21105/joss.03723}, year = {2021}, publisher = {The Open Journal}, volume = {6}, number = {67}, pages = {3723}, author = {Joris Paret and Daniele Coslovich}, title = {partycls: A Python package for structural clustering}, journal = {Journal of Open Source Software} } Authors Joris Paret\nDaniele Coslovich\n","date":1615852800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1659199830,"objectID":"dccc009c364b183431090d2c636b79fa","permalink":"https://jorisparet.github.io/project/partycls/","publishdate":"2021-03-16T00:00:00Z","relpermalink":"/project/partycls/","section":"project","summary":"Unsupervised learning of structure in systems of interacting particles.","tags":["Python","Machine Learning","Clustering","Physics","Molecular Dynamics"],"title":"partycls","type":"project"},{"authors":["Joris Paret","吳恩達"],"categories":["Demo","教程"],"content":"Overview The Wowchemy website builder for Hugo, along with its starter templates, is designed for professional creators, educators, and teams/organizations - although it can be used to create any kind of site The template can be modified and customised to suit your needs. It’s a good platform for anyone looking to take control of their data and online identity whilst having the convenience to start off with a no-code solution (write in Markdown and customize with YAML parameters) and having flexibility to later add even deeper personalization with HTML and CSS You can work with all your favourite tools and apps with hundreds of plugins and integrations to speed up your workflows, interact with your readers, and much more The template is mobile first with a responsive design to ensure that your site looks stunning on every device. Get Started 👉 Create a new site 📚 Personalize your site 💬 Chat with the Wowchemy community or Hugo community 🐦 Twitter: @wowchemy @GeorgeCushen #MadeWithWowchemy 💡 Request a feature or report a bug for Wowchemy ⬆️ Updating Wowchemy? View the Update Tutorial and Release Notes Crowd-funded open-source software To help us develop this template and software sustainably under the MIT license, we ask all individuals and businesses that use it to help support its ongoing maintenance and development via sponsorship.\n❤️ Click here to become a sponsor and help support Wowchemy’s future ❤️ As a token of appreciation for sponsoring, you can unlock these awesome rewards and extra features 🦄✨\nEcosystem Hugo Academic CLI: Automatically import publications from BibTeX Inspiration Check out the latest demo of what you’ll get in less than 10 minutes, or view the showcase of personal, project, and business sites.\nFeatures Page builder - Create anything with widgets and elements Edit any type of content - Blog posts, publications, talks, slides, projects, and more! Create content in Markdown, Jupyter, or RStudio Plugin System - Fully customizable color and font themes Display Code and Math - Code highlighting and LaTeX math supported Integrations - Google Analytics, Disqus commenting, Maps, Contact Forms, and more! Beautiful Site - Simple and refreshing one page design Industry-Leading SEO - Help get your website found on search engines and social media Media Galleries - Display your images and videos with captions in a customizable gallery Mobile Friendly - Look amazing on every screen with a mobile friendly version of your site Multi-language - 34+ language packs including English, 中文, and Português Multi-user - Each author gets their own profile page Privacy Pack - Assists with GDPR Stand Out - Bring your site to life with animation, parallax backgrounds, and scroll effects One-Click Deployment - No servers. No databases. Only files. Themes Wowchemy and its templates come with automatic day (light) and night (dark) mode built-in. Alternatively, visitors can choose their preferred mode - click the moon icon in the top right of the Demo to see it in action! Day/night mode can also be disabled by the site admin in params.toml.\nChoose a stunning theme and font for your site. Themes are fully customizable.\nLicense Copyright 2016-present George Cushen.\nReleased under the MIT license.\n","date":1607817600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1650770445,"objectID":"279b9966ca9cf3121ce924dca452bb1c","permalink":"https://jorisparet.github.io/post/getting-started/","publishdate":"2020-12-13T00:00:00Z","relpermalink":"/post/getting-started/","section":"post","summary":"Welcome 👋 We know that first impressions are important, so we've populated your new site with some initial content to help you get familiar with everything in no time.","tags":["Academic","开源"],"title":"Welcome to Wowchemy, the website builder for Hugo","type":"post"},{"authors":["Joris Paret","Robert L. Jack","Daniele Coslovich"],"categories":null,"content":" ","date":1586390400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1659216125,"objectID":"2bbbbda9037691408acdbe296be255fc","permalink":"https://jorisparet.github.io/publication/2020_jcp/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/2020_jcp/","section":"publication","summary":"We present an information-theoretic approach inspired by distributional clustering to assess the structural heterogeneity of particulate systems. Our method identifies communities of particles that share a similar local structure by harvesting the information hidden in the spatial variation of two- or three-body static correlations. This corresponds to an unsupervised machine learning approach that infers communities solely from the particle positions and their species. We apply this method to three models of supercooled liquids and find that it detects subtle forms of local order, as demonstrated by a comparison with the statistics of Voronoi cells. Finally, we analyze the time-dependent correlation between structural communities and particle mobility and show that our method captures relevant information about glassy dynamics.","tags":[],"title":"Assessing the structural heterogeneity of supercooled liquids through community inference","type":"publication"}]